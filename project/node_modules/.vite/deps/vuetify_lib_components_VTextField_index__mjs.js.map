{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTextField/VTextField.tsx"],
  "sourcesContent": ["// Styles\nimport './VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps, VField } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { cloneVNode, computed, nextTick, ref } from 'vue'\nimport { callEvent, filterInputAttrs, genericComponent, pick, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\ntype EventProp<T = (...args: any[]) => any> = T | T[]\nconst EventProp = [Function, Array] as PropType<EventProp>\n\nexport const makeVTextFieldProps = propsFactory({\n  autofocus: Boolean,\n  counter: [Boolean, Number, String] as PropType<true | number | string>,\n  counterValue: Function as PropType<(value: any) => number>,\n  hint: String,\n  persistentHint: Boolean,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  suffix: String,\n  type: {\n    type: String,\n    default: 'text',\n  },\n\n  ...makeVInputProps(),\n  ...makeVFieldProps(),\n}, 'v-text-field')\n\nexport const VTextField = genericComponent<Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n  default: []\n}>>()({\n  name: 'VTextField',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: makeVTextFieldProps(),\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value ?? '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as unknown as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VField>()\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      activeTypes.includes(props.type) ||\n      props.persistentPlaceholder ||\n      isFocused.value\n    ))\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isFocused.value || props.persistentHint) ? props.hint : ''\n    })\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n\n      if (e.target === inputRef.value) return\n\n      onFocus()\n      e.preventDefault()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = null\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      model.value = (e.target as HTMLInputElement).value\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          onClick:prepend={ props['onClick:prepend'] }\n          onClick:append={ props['onClick:append'] }\n          { ...rootAttrs }\n          { ...inputProps }\n          focused={ isFocused.value }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                onMousedown={ onControlMousedown }\n                onClick={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => {\n                    const inputNode = (\n                      <input\n                        ref={ inputRef }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        name={ props.name }\n                        placeholder={ props.placeholder }\n                        size={ 1 }\n                        type={ props.type }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n                    )\n\n                    return (\n                      <>\n                        { props.prefix && (\n                          <span class=\"v-text-field__prefix\">\n                            { props.prefix }\n                          </span>\n                        ) }\n\n                        { slots.default ? (\n                          <div\n                            class={ fieldClass }\n                            data-no-activator=\"\"\n                          >\n                            { slots.default() }\n                            { inputNode }\n                          </div>\n                        ) : cloneVNode(inputNode, { class: fieldClass }) }\n\n                        { props.suffix && (\n                          <span class=\"v-text-field__suffix\">\n                            { props.suffix }\n                          </span>\n                        ) }\n                      </>\n                    )\n                  },\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                ) }\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n\nexport function filterVTextFieldProps (props: Partial<ExtractPropTypes<ReturnType<typeof makeVTextFieldProps>>>) {\n  return pick(props, Object.keys(VTextField.props) as any)\n}\n"],
  "mappings": "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",
  "names": ["activeTypes", "makeVTextFieldProps", "propsFactory", "autofocus", "Boolean", "counter", "Number", "String", "counterValue", "Function", "hint", "persistentHint", "prefix", "placeholder", "persistentPlaceholder", "persistentCounter", "suffix", "type", "default", "makeVInputProps", "makeVFieldProps", "VTextField", "genericComponent", "name", "directives", "Intersect", "inheritAttrs", "props", "emits", "e", "focused", "val", "setup", "attrs", "emit", "slots", "model", "useProxiedModel", "isFocused", "focus", "blur", "useFocus", "computed", "value", "toString", "length", "max", "maxlength", "undefined", "onIntersect", "isIntersecting", "entries", "target", "vInputRef", "ref", "vFieldRef", "inputRef", "isActive", "activeTypes", "includes", "messages", "onFocus", "document", "activeElement", "onControlMousedown", "preventDefault", "onControlClick", "onClear", "stopPropagation", "nextTick", "callEvent", "onInput", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "modelValue", "_", "inputProps", "filterInputProps", "fieldProps", "filterFieldProps", "variant", "id", "isDisabled", "isDirty", "isReadonly", "isValid", "dirty", "class", "fieldClass", "slotProps", "inputNode", "handler", "cloneVNode", "forwardRefs"]
}
