{
  "version": 3,
  "sources": ["../../vuetify/src/composables/router.tsx"],
  "sourcesContent": ["// Utilities\nimport { getCurrentInstance, hasEvent, IN_BROWSER, propsFactory } from '@/util'\nimport {\n  computed,\n  nextTick,\n  onScopeDispose,\n  resolveDynamicComponent,\n  toRef,\n} from 'vue'\n\n// Types\nimport type { ComputedRef, PropType, Ref, SetupContext } from 'vue'\nimport type {\n  RouterLink as _RouterLink,\n  useLink as _useLink,\n  NavigationGuardNext,\n  RouteLocationNormalizedLoaded,\n  RouteLocationRaw,\n  Router,\n  UseLinkOptions,\n} from 'vue-router'\nimport type { EventProp } from '@/util'\n\nexport function useRoute (): Ref<RouteLocationNormalizedLoaded | undefined> {\n  const vm = getCurrentInstance('useRoute')\n\n  return computed(() => vm?.proxy?.$route)\n}\n\nexport function useRouter (): Router | undefined {\n  return getCurrentInstance('useRouter')?.proxy?.$router\n}\n\nexport interface LinkProps {\n  href: string | undefined\n  replace: boolean | undefined\n  to: RouteLocationRaw | undefined\n  exact: boolean | undefined\n}\n\nexport interface LinkListeners {\n  onClick?: EventProp | undefined\n  onClickOnce?: EventProp | undefined\n}\n\nexport interface UseLink extends Omit<Partial<ReturnType<typeof _useLink>>, 'href'> {\n  isLink: ComputedRef<boolean>\n  isClickable: ComputedRef<boolean>\n  href: Ref<string | undefined>\n}\n\nexport function useLink (props: LinkProps & LinkListeners, attrs: SetupContext['attrs']): UseLink {\n  const RouterLink = resolveDynamicComponent('RouterLink') as typeof _RouterLink | string\n\n  const isLink = computed(() => !!(props.href || props.to))\n  const isClickable = computed(() => {\n    return isLink?.value || hasEvent(attrs, 'click') || hasEvent(props, 'click')\n  })\n\n  if (typeof RouterLink === 'string') {\n    return {\n      isLink,\n      isClickable,\n      href: toRef(props, 'href'),\n    }\n  }\n\n  const link = props.to ? RouterLink.useLink(props as UseLinkOptions) : undefined\n\n  return {\n    isLink,\n    isClickable,\n    route: link?.route,\n    navigate: link?.navigate,\n    isActive: link && computed(() => props.exact ? link.isExactActive?.value : link.isActive?.value),\n    href: computed(() => props.to ? link?.route.value.href : props.href),\n  }\n}\n\nexport const makeRouterProps = propsFactory({\n  href: String,\n  replace: Boolean,\n  to: [String, Object] as PropType<RouteLocationRaw>,\n  exact: Boolean,\n}, 'router')\n\nlet inTransition = false\nexport function useBackButton (router: Router | undefined, cb: (next: NavigationGuardNext) => void) {\n  let popped = false\n  let removeBefore: (() => void) | undefined\n  let removeAfter: (() => void) | undefined\n\n  if (IN_BROWSER) {\n    nextTick(() => {\n      window.addEventListener('popstate', onPopstate)\n      removeBefore = router?.beforeEach((to, from, next) => {\n        if (!inTransition) {\n          setTimeout(() => popped ? cb(next) : next())\n        } else {\n          popped ? cb(next) : next()\n        }\n        inTransition = true\n      })\n      removeAfter = router?.afterEach(() => {\n        inTransition = false\n      })\n    })\n    onScopeDispose(() => {\n      window.removeEventListener('popstate', onPopstate)\n      removeBefore?.()\n      removeAfter?.()\n    })\n  }\n\n  function onPopstate (e: PopStateEvent) {\n    if (e.state?.replaced) return\n\n    popped = true\n    setTimeout(() => (popped = false))\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;AA6BO,SAASA,YAAiC;AA7BjD;AA8BE,UAAOC,8BAAmB,WAAW,MAA9BA,mBAAiCC,UAAjCD,mBAAwCE;AACjD;AAoBO,SAASC,QAASC,OAAkCC,OAAuC;AAChG,QAAMC,aAAaC,wBAAwB,YAAY;AAEvD,QAAMC,SAASC,SAAS,MAAM,CAAC,EAAEL,MAAMM,QAAQN,MAAMO,GAAG;AACxD,QAAMC,cAAcH,SAAS,MAAM;AACjC,YAAOD,iCAAQK,UAASC,SAAST,OAAO,OAAO,KAAKS,SAASV,OAAO,OAAO;EAC7E,CAAC;AAED,MAAI,OAAOE,eAAe,UAAU;AAClC,WAAO;MACLE;MACAI;MACAF,MAAMK,MAAMX,OAAO,MAAM;IAC3B;EACF;AAEA,QAAMY,OAAOZ,MAAMO,KAAKL,WAAWH,QAAQC,KAAK,IAAsBa;AAEtE,SAAO;IACLT;IACAI;IACAM,OAAOF,6BAAME;IACbC,UAAUH,6BAAMG;IAChBC,UAAUJ,QAAQP,SAAS,MAAA;AA1E/B;AA0EqCL,mBAAMiB,SAAQL,UAAKM,kBAALN,mBAAoBH,SAAQG,UAAKI,aAALJ,mBAAeH;KAAK;IAC/FH,MAAMD,SAAS,MAAML,MAAMO,KAAKK,6BAAME,MAAML,MAAMH,OAAON,MAAMM,IAAI;EACrE;AACF;AAEO,IAAMa,kBAAkBC,aAAa;EAC1Cd,MAAMe;EACNC,SAASC;EACThB,IAAI,CAACc,QAAQG,MAAM;EACnBP,OAAOM;AACT,GAAG,QAAQ;",
  "names": ["useRouter", "getCurrentInstance", "proxy", "$router", "useLink", "props", "attrs", "RouterLink", "resolveDynamicComponent", "isLink", "computed", "href", "to", "isClickable", "value", "hasEvent", "toRef", "link", "undefined", "route", "navigate", "isActive", "exact", "isExactActive", "makeRouterProps", "propsFactory", "String", "replace", "Boolean", "Object"]
}
